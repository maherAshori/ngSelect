var app = angular.module("ngSelect", []); app.directive("ngSelect", ["$filter", function (e) { return { restrict: "E", require: "^ngModel", scope: { options: "=", searchable: "=", setByName: "=", setById: "=", showAs: "@", output: "@", rtl: "@", disabled: "@" }, template: '<div class="select-bootstrap-form {{disabled}}" ng-class="{\'rtl\': rtl}"><span ng-bind="defaultValue[showAs]"></span><ul><li ng-show="searchable"><input type="text" ng-model="searching"><i class="glyphicon glyphicon-search"></i></li><li ng-repeat="option in options | filter: searching " ng-click="setValue(option)">{{option[showAs]}}<i class="glyphicon glyphicon-pushpin" ng-class="{\'active\': option.active}"></i></li></ul></div>', link: function (n, i, t, a) { n.searchResults = [], i.hover(function () { i.find("input").select() }), angular.isUndefined(n.showAs) && (n.showAs = "name"), a.$render = function () { var i = a.$modelValue; if (!angular.isUndefined(i)) { var t; n.setByName ? (t = e("filter")(n.options, { name: i.name }, !0)[0], angular.isUndefined(t) ? console.error("[" + i.name + "] as name, not found in the options") : n.setValue(t)) : (t = e("filter")(n.options, { value: i.value }, !0)[0], angular.isUndefined(t) ? console.error("[" + i.value + "] as value, not found in the options") : n.setValue(t)), n.setById && (t = e("filter")(n.options, { id: i.id }, !0)[0], angular.isUndefined(t) ? console.error("[" + i.id + "] as id, not found in the options") : n.setValue(t)) } }, angular.forEach(n.options, function (e) { e.active = !1 }), n.defaultValue = n.options[0], n.options[0].active = !0, n.setValue = function (e) { angular.forEach(n.options, function (e) { e.active = !1 }), n.defaultValue = e, e.active = !0, a.$setViewValue(angular.isUndefined(n.output) ? e : e[n.output]) } } } }]);
