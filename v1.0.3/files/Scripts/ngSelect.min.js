var app = angular.module("ngSelect", []); app.directive("ngSelect", ["$filter", function (e) { return { restrict: "E", require: "^ngModel", replace: !0, scope: { options: "=", searchable: "=", setByName: "=", setById: "=", ngDisabled: "=", showAs: "@", output: "@", rtl: "@", searchNotFound: "@", limitTo: "@" }, template: '<div off-click="closeAllSelects()" class="select-bootstrap-form {{ngDisabled ? \'disabled\':\'\'}}" ng-class="{\'rtl\': rtl}">{{isOpen}}<span ng-bind="defaultValue[showAs]" ng-click="proccess()"></span><i class="glyphicon glyphicon-menu-down"></i><ul><li ng-show="searchable"><input type="text"" ng-model="searching"><i class="glyphicon glyphicon-search"></i><i class="glyphicon glyphicon-remove-circle" ng-class="{\'active\':searching}" ng-click="removeSearch()"></i></li><li ng-repeat="option in filtered = (options | filter: searching ) | limitTo: limitTo " ng-click="setValue(option)">{{option[showAs]}}<i class="glyphicon glyphicon-pushpin" ng-class="{\'active\': option.active}"></i></li><li ng-if="filtered.length === 0">{{searchNotFound}}</li><li class="result" ng-if="searching"><small>{{filtered.length}}</small></li></ul></div>', link: function (n, o, i, t) { n.searchResults = [], n.closeAllSelects = function () { o.removeClass("open") }, n.proccess = function () { jQuery(".select-bootstrap-form").removeClass("open"), o.addClass("open"), n.searching = "", n.focus = !0, o.find("input").focus() }, n.removeSearch = function () { n.searching = "", o.find("input").focus() }, angular.isUndefined(n.showAs) && (n.showAs = "name"), t.$render = function () { var o = t.$modelValue; if (angular.isUndefined(o)) n.defaultValue = n.options[0], n.options[0].active = !0, t.$setViewValue(angular.isUndefined(n.output) ? n.options[0] : n.options[0][n.output]); else { var i; n.setByName ? (i = e("filter")(n.options, { name: o.name }, !0)[0], angular.isUndefined(i) ? console.error("[" + o.name + "] as name, not found in the options") : n.setValue(i)) : (i = e("filter")(n.options, { value: o.value }, !0)[0], angular.isUndefined(i) ? console.error("[" + o.value + "] as value, not found in the options") : n.setValue(i)), n.setById && (i = e("filter")(n.options, { id: o.id }, !0)[0], angular.isUndefined(i) ? console.error("[" + o.id + "] as id, not found in the options") : n.setValue(i)) } }, angular.forEach(n.options, function (e) { e.active = !1 }), n.setValue = function (e) { angular.forEach(n.options, function (e) { e.active = !1 }), n.defaultValue = e, e.active = !0, t.$setViewValue(angular.isUndefined(n.output) ? e : e[n.output]), o.removeClass("open") } } } }]), app.directive("offClick", ["$rootScope", "$parse", function (e, n) { function o(e, n) { if (!e || !n) return !1; for (var o = n.length, i = 0; o > i; ++i) { var t = n[i], l = !1; try { l = t.contains(e) } catch (c) { "undefined" != typeof t.compareDocumentPosition && (l = t === e || Boolean(16 & t.compareDocumentPosition(e))) } if (l) return !0 } return !1 } function i(n) { if ("touchmove" === n.type) return c = !0, !1; if (c) return c = !1, !1; var i = n.target || n.srcElement; angular.forEach(l, function (t) { t.elm.contains(i) || o(i, t.offClickFilter) || e.$evalAsync(function () { t.cb(t.scope, { $event: n }) }) }) } var t = 0, l = {}, c = !1; return document.addEventListener("touchmove", i, !0), document.addEventListener("touchend", i, !0), document.addEventListener("click", i, !0), { restrict: "A", compile: function (o, i) { var c = n(i.offClick); return function (o, s) { function a() { l[p] = { elm: s[0], cb: c, scope: o, offClickFilter: u } } function r() { delete l[p] } var u, f, p = t++; u = document.querySelectorAll(o.$eval(i.offClickFilter)), i.offClickIf ? f = e.$watch(function () { return n(i.offClickIf)(o) }, function (e) { e ? a() : e || r() }) : a(), i.$observe("offClickFilter", function (e) { u = document.querySelectorAll(o.$eval(e)) }), o.$on("$destroy", function () { r(), f && f() }) } } } }]);
